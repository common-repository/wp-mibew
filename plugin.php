<?php

/**
 * Plugin specific class
 * @author Svetoslav Marinov <slavi@slavi.biz> | http://orbisius.com
 * @package WebWeb_WP_Mibew
 */
class WebWeb_WP_Mibew extends WebWeb_WP_MibewBase {
    protected $plugin_name = 'WP Mibew'; //
    protected $plugin_id_str = 'wp_mibew'; // keep both id str and shortcode the same.
    protected $plugin_short_code = '[wp-mibew]'; //
    protected $plugin_support_link = 'http://miniads.ca/widgets/contact/profile/wp-mibew?height=200&width=500&description=Please enter your enquiry below.'; //
    protected $plugin_admin_url_prefix = null; // filled in later
    protected $plugin_home_page = 'http://orbisius.com/site/products/wp-mibew/';
    protected $plugin_tinymce_name = 'wwwpmibew'; // if you change it update the tinymce/editor_plugin.js and reminify the .min.js file.

    /**
     * List only options specific for this plugin. Other fields are *inherited* from the base class
     * @var array
     */
    protected $plugin_default_opts = array(
        'chat_window_style' => 'simplicity',
        'chat_image' => 'webim',
        'chat_locale' => 'en',
    );

    /**
     * The items in the admin menu. (optional)
     * @var array
     */
    protected $admin_menu_items = array(
//        'Dashboard' => 'menu.dashboard.php',
        'Settings' => 'menu.settings.php',
//        'FAQ' => 'menu.faq.php',
        'Settings' => 'menu.settings.php',
        'Help' => 'menu.support.php',
        //'Contact' => 'menu.contact.php',
        'About' => 'menu.about.php',
    );
    
	protected $app_title = 'WP Mibew: Mibew chat within WordPress';
	protected $plugin_description = 'WP Mibew generates the javascript chat snippet for the mibew.org open source chat software';
    protected $chat_snippet = null;

    /**
     * handles the singleton
     */
    static public function get_instance($inst = null) {
		if (is_null(self::$instance)) {
            $cls = __CLASS__;
            $inst = new $cls;
			$inst = parent::get_instance($inst);

            //$inst->load_assets();

            // %%CHAT_URL%%
            // %%CHAT_WINDOW_STYLE%%
            // %%CHAT_IMAGE%%
            // %%CHAT_LOCALE%%
            $inst->chat_snippet = <<<CHAT_SNIPPET_EOF
<!-- Snippet generated by $inst->plugin_name | $inst->plugin_support_domain -->
    <!-- webim button -->
    <a href="%%CHAT_URL%%/client.php?locale=%%CHAT_LOCALE%%&amp;style=%%CHAT_WINDOW_STYLE%%"
    target="_blank" onclick="if(navigator.userAgent.toLowerCase().indexOf('opera') != -1 &amp;&amp; window.event.preventDefault) window.event.preventDefault();this.newWindow = window.open('%%CHAT_URL%%/client.php?locale=%%CHAT_LOCALE%%&amp;style=%%CHAT_WINDOW_STYLE%%&amp;url='+escape(document.location.href)+'&amp;referrer='+escape(document.referrer), 'webim', 'toolbar=0,scrollbars=0,location=0,status=1,menubar=0,width=640,height=480,resizable=1');this.newWindow.focus();this.newWindow.opener=window;return false;">
    <img src="%%CHAT_URL%%/b.php?i=%%CHAT_IMAGE%%&amp;lang=%%CHAT_LOCALE%%" border="0" width="177" height="61" alt=""/></a>
    <!-- / webim button -->
<!-- /$inst->plugin_name | $inst->plugin_support_domain -->

CHAT_SNIPPET_EOF;

            $inst->plugin_default_opts = array_merge($inst->plugin_default_opts, $inst->base_plugin_default_opts);

            self::$instance = $inst;
        }

		return self::$instance;
	}

    /**
     * Do we need an icon in the rich text editor
     * @var bool
     */
    protected $register_tinymce_button = false;

    /**
     * holds stuff
     * @var array
     */
    protected $assets = array(
        'css' => array('css/main.css'),
        'js' => array(),
    );
    
    /**
     * handles the init
     */
    function init() {
        // nice parent handles everything for us
        parent::init();
			
        add_shortcode($this->plugin_id_str, array($this, 'parse_short_code'));

        if (!is_admin()) {
            // we need this because the plugin can short code can be inserted anywhere so we'll look in the whole page content
            add_action('wp', array($this, 'setup_output_handler'), 10, 0);            
        }
		
        add_action('wp_enqueue_scripts', array($this, 'load_assets'));
        add_action('admin_enqueue_scripts', array($this, 'load_assets'));
    }

    /**
     * Setups the callback for the output handler
     *
     * @param void
     */
    function setup_output_handler() {
        if (is_admin()) {
            return;
        }

        ob_start(array($this, 'parse_output'));
    }

    /**
     * Parse the whole content (wp still doesn't allow that).
     * We need to replace the mibew short code ... we're using our regex because the code can be anywhere in the theme, not just in post's content
     * If there are global defaults and the plugin is disabled they will be loaded instead.
     *
     * @param string $buffer
     * @return string
     */
    function parse_output($buffer) {
        $opts = $this->get_options();

        // do we see a short code?
        if (stripos($buffer, $this->plugin_short_code) !== false) {
            $local_opts = array();
            $chat_snippet_ready = $this->chat_snippet;

            if (empty($opts['status'])) {
                // if the plugin is NOT active and we have a global data e.g. useful in network install use the globals.
                if (WebWeb_WP_MibewUtil::has_global_data()) {
                    $chat_snippet_ready .= "\n<!-- using global defaults -->\n";
                    $local_opts = WebWeb_WP_MibewUtil::has_global_data(true);
                } else { // when a plugin is not enabled do not show render the code but insert an HTML comment.
                    $link = $this->plugin_admin_url_prefix . '/menu.settings.php';
                    $chat_snippet_ready = "<!-- $this->plugin_name is not enabled. Please check the settings at [ $link ] -->";
                }
            } else {
                $local_opts = $opts;
            }

            if (!empty($local_opts)) {
                $chat_snippet_ready = WebWeb_WP_MibewUtil::replace_vars($chat_snippet_ready, array(
                    'CHAT_URL' => $local_opts['chat_url'],
                    'CHAT_WINDOW_STYLE' => $local_opts['chat_window_style'],
                    'CHAT_IMAGE' => $local_opts['chat_image'],
                    'CHAT_LOCALE' => $local_opts['chat_locale'],
                ));
            }
                                    
            // let's replace the mibew short code ... we're using our regex because the code can be anywhere in the theme, not just in post's content
            $buffer = preg_replace('#(?:<!--\s*)?' . preg_quote($this->plugin_short_code) . '(?:\s*-->)?#si', $chat_snippet_ready, $buffer);
		}

        return $buffer;
    }

    /**
     * This is called when [wp-mibew] is found.
     * We'are tricking parse_output as if we've received a buffer
     */
    function parse_short_code($attr = array()) {
        $buffer = $this->get('plugin_short_code');
        $buffer = $this->parse_output($buffer);

		return $buffer;
    }

    /**
     * gets current options and return the default ones if not exist
     * @param void
     * @return array
     */
    function get_options() {
        $opts = parent::get_options();

        if (empty($opts['chat_url'])) {
            $opts['chat_url'] = $this->site_url;
        } elseif (!preg_match('#^https?://#si', $opts['chat_url'])) {
            $opts['chat_url'] = 'http://' . rtrim($opts['chat_url'], '/');
        }

        return $opts;
    }
}

/**
 * handles the widget stuff i.e. can be added in the sidebar
 */
class WebWeb_WP_MibewWidget extends WP_Widget {
    /** constructor */
	function __construct() {
        $webweb_wp_mibew_obj = WebWeb_WP_Mibew::get_instance();
        $base_id = $webweb_wp_mibew_obj->get('plugin_id_str') . '_widget';
        $name = $webweb_wp_mibew_obj->get('plugin_name') . ' Widget';

		parent::WP_Widget($base_id, $name, array('description' => ''));
	}

    /**
     * Renders the widget form in the admin area
     * @param type $instance
     * @return string
     */
    function form($instance) {
        $webweb_wp_mibew_obj = WebWeb_WP_Mibew::get_instance();

        $link = $webweb_wp_mibew_obj->get('plugin_admin_url_prefix') . '/menu.settings.php';

        // ask the parent to output the default message about missing form
        parent::form($instance);

        $opts = $webweb_wp_mibew_obj->get_options();

        if (empty($opts['status'])) {
            echo WebWeb_WP_MibewUtil::m('<p class="no-options-widget">The plugin has not been configured yet. Please go to <a href="' . $link . '">Plugin\'s Settings</a> to do it now.</p>');
        } else {
            echo '<p class="no-options-widget">To make any changes please go to <a href="' . $link . '">Plugin\'s Settings</a>.</p>';
        }

        // will make the Save button disappear ... we don't need it and can lead to confusion because no form data is filled in the widget area anyways.
        return 'noform';
    }

    // at the moment we don't need any data
	/*function form($instance) {
        $defaults = array( 'title' => 'My Info', );
        $instance = wp_parse_args( (array) $instance, $defaults );

        $title = esc_attr($instance['title']);
        $title_label = _e('Title:');
        $title_fmt = $this->get_field_id('title');
        $title_name = $this->get_field_name('title');

        $buff = <<<BUFF_EOF
		<p>
            <label for="$title_fmt">$title_label</label>
            <input class="widefat" id="$title_fmt" name="$title_name" type="text" value="$title" />
		</p>
BUFF_EOF;
        echo $buff;
	}

	function update($new_instance, $old_instance) {
		$instance = $old_instance;
		$instance['title'] = strip_tags($new_instance['title']);

		return $instance;
	}*/

    /**
     * This is rendered on the public side
     * @param array $args
     * @param WP_Widget $instance
     */
	function widget($args, $instance) {
        $webweb_wp_mibew_obj = WebWeb_WP_Mibew::get_instance();

        // makes params passed from WP available locally.
		extract($args);

        $buff = '';
        $buff .= $before_widget;
		$buff .= $webweb_wp_mibew_obj->get('plugin_short_code');
		$buff .= $after_widget;

        $webweb_wp_mibew_obj->parse_output($buff);

		echo $buff;
	}
}